# # This workflow will upload a Python Package to PyPI when a release is created
# # For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# # This workflow uses actions that are not certified by GitHub.
# # They are provided by a third-party and are governed by
# # separate terms of service, privacy policy, and support
# # documentation.

# # This workflow builds, tests, and uploads a Python package to PyPI when a release is created

# name: Upload Python Package

# on:
#   release:
#     types: [published]

# permissions:
#   contents: read

# jobs:
#   build-and-test:
#     runs-on: ubuntu-latest
#     steps:
#       # Checkout the code
#       - uses: actions/checkout@v4
      
#       # Set up Python
#       - name: Set up Python
#         uses: actions/setup-python@v5
#         with:
#           python-version: '3.8' # Specify your Python version
      
#       # Install dependencies
#       - name: Install dependencies
#         run: |
#           python -m pip install --upgrade pip
#           pip install build flake8 pytest
#           pip install -r requirements.txt
      
#       # Linting with flake8
#       - name: Lint with flake8
#         run: |
#           # stop the build if there are Python syntax errors or undefined names
#           flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
#           # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
#           flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      
#       # Run tests with pytest
#       - name: Run tests with pytest
#         run: |
#           pytest -v
      
#       # Build the Python package
#       - name: Build distributions
#         run: python -m build
      
#       # Upload build artifacts
#       - name: Upload build artifacts
#         uses: actions/upload-artifact@v4
#         with:
#           name: release-dists
#           path: dist/

#   pypi-publish:
#     runs-on: ubuntu-latest
#     needs: build-and-test
#     permissions:
#       id-token: write
      
#     # Use a dedicated environment for PyPI deployment
#     environment:
#       name: pypi

#     steps:
#       # Download the build artifacts
#       - name: Retrieve release distributions
#         uses: actions/download-artifact@v4
#         with:
#           name: release-dists
#           path: dist/

#       # Publish the package to PyPI
#       - name: Publish package to PyPI
#         uses: pypa/gh-action-pypi-publish@release/v1
#         with:
#           packages-dir: dist/
#         env:
#           TWINE_USERNAME: __token__
#           TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}










# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Upload Python Package

on:
  release:
    types: [published]

permissions:
  contents: read

jobs:
  deploy:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.8'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        pip install -r requirements.txt
        pip install build
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest -v    
    - name: Build package
      run: python -m build
    - name: Publish package
      uses: pypa/gh-action-pypi-publish@27b31702a0e7fc50959f5ad993c78deac1bdfc29
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}